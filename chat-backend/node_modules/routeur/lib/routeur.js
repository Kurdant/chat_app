'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*!
                                                                                                                                                                                                                                                                   * @license routeur
                                                                                                                                                                                                                                                                   * (c) sugarshin
                                                                                                                                                                                                                                                                   * License: MIT
                                                                                                                                                                                                                                                                   */

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _globToRegexp = require('glob-to-regexp');

var _globToRegexp2 = _interopRequireDefault(_globToRegexp);

var _extRegex = require('ext-regex');

var _extRegex2 = _interopRequireDefault(_extRegex);

var _objectForEach = require('./utils/objectForEach');

var _objectForEach2 = _interopRequireDefault(_objectForEach);

var _objectFilter = require('./utils/objectFilter');

var _objectFilter2 = _interopRequireDefault(_objectFilter);

var _indexRegex = require('./utils/indexRegex');

var _indexRegex2 = _interopRequireDefault(_indexRegex);

var _isString = require('./utils/isString');

var _isString2 = _interopRequireDefault(_isString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Routeur = (function () {

  /**
   * constructor
   *
   * @param  {Object} routes = {}
   * @param  {Object} config
   */

  function Routeur() {
    var routes = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Routeur);

    var config = arguments[1];

    this.routes = routes;
    this.config = _extends({ rootPath: '' }, config);
  }

  /**
   * run
   *
   * @param   {String} currentPathName = location.pathname || ''
   * @returns {void}
   */

  _createClass(Routeur, [{
    key: 'run',
    value: function run() {
      var _this = this;

      var currentPathName = arguments.length <= 0 || arguments[0] === undefined ? location.pathname || '' : arguments[0];

      (0, _objectForEach2.default)(this.routes, function (actionOrActions, pathName) {
        var globPath = _this._getGlobPath(pathName);
        var regexp = (0, _globToRegexp2.default)(globPath, { extended: true });
        var finalActions = Array.isArray(actionOrActions) ? actionOrActions : [actionOrActions];

        if (regexp.test(currentPathName)) {
          finalActions.forEach(function (action) {
            return action();
          });
        }
      });
    }

    /**
     * configure
     *
     * @param   {Object} config
     * @returns {void}
     */

  }, {
    key: 'configure',
    value: function configure(config) {
      this.config = _extends({}, this.config, config);
    }

    /**
     * addRoute
     *
     * @param   {String or Object} pathName or routes
     * @param   {Function or Functions Array} actionOrActions
     * @returns {void}
     */

  }, {
    key: 'addRoute',
    value: function addRoute(pathName, actionOrActions) {
      if ((0, _isString2.default)(pathName)) {
        this.routes[pathName] = actionOrActions;
      } else {
        var route = pathName;
        this.routes = _extends({}, this.routes, route);
      }
    }

    /**
     * removeRoute
     *
     * @param   {String} pathName
     * @returns {void}
     */

  }, {
    key: 'removeRoute',
    value: function removeRoute(pathName) {
      this.routes = (0, _objectFilter2.default)(this.routes, function (val, key) {
        return key !== pathName;
      });
    }

    /**
     * _getGlobPath
     *
     * @param   {String} pathName
     * @returns {String} glob
     */

  }, {
    key: '_getGlobPath',
    value: function _getGlobPath(pathName) {
      if ((0, _extRegex2.default)().test(pathName)) {
        return '' + this.config.rootPath + pathName;
      }

      if ((0, _indexRegex2.default)().test(pathName)) {
        return '' + this.config.rootPath + pathName + '{,index.html}';
      }

      return '' + this.config.rootPath + pathName + '{/,/index.html}';
    }
  }]);

  return Routeur;
})();

exports.default = Routeur;